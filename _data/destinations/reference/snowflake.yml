# -------------------------- #
#     Snowflake Reference    #
# -------------------------- #

# This file contains the data used in this destination's overview/reference
# guide. Includes supported connection types, data type limits, object
# naming rules, etc.


# -------------------------- #
#         DEFAULTS           #
# -------------------------- #

# The sections below contain key:value pairs for each category.
# This is done so that individual values can be called instead of having
# to loop through the entire list of items to get a single thing.


# -------------------------- #
#     Destination Details    #
# -------------------------- #

destination-details-info:
  fully-managed: &fully-managed |
    true
  pricing-model: &pricing-model |
    Usage
  pricing-details: &pricing-details |
    Snowflake pricing is based on two factors: the volume or data stored in your Snowflake destination and the amount of compute usage (the time the server runs) in seconds. 

    Snowflake offers two types of plans, each with varying levels of access and features. There are On Demand plans which are commitment-free and usage-based. The alternative is a Capacity option, which guarantees secure price discounts. [Learn more about Snowflake plans and pricing here]({{ site.data.destinations.resource-links[destination.type]pricing }}){:target="new"}.
  free-option: &free-option |
    No


# -------------------------- #
#       Stitch Details       #
# -------------------------- #

# Details about Stitch's implementation &
# requirements for the destination.

stitch-details-info:
  release-status: &release-status |
    Released
  pricing-tier: &pricing-tier |
    All Stitch plans
  supported-versions: &supported-versions |
    n/a

# Connection methods

  connection-methods:
    ssl: &connection-methods-ssl |
      true
    ## Indicates whether SSL can be configured via the API
    connect-ssl: |
      false
    ssh: &connection-methods-ssh |
      false
    vpn: &connection-methods-vpn |
      false

  workload-performance-management: &workload-performance-management |
    true

# -------------------------- #
#         Replication        #
# -------------------------- #

replication-info:
  incremental-replication:
    upserts: &incremental-rep-upserts |
      true
    append: &incremental-rep-append |
      true

  primary-keys:
    supported: &primary-key-support |
      true

  multiple-data-types:
    supported: &multiple-data-type-support |
      false

  nested-structures:
    supported: &nested-structure-support |
      true

## Refer to _data/destinations/reference/incompatibilities.yml
## for incompatible sources

# -------------------------- #
#         Limitations        #
# -------------------------- #

# -------------------------- #
#      Object name limits    #
# -------------------------- #

object-name-limit-info:
  case-sensitivity: &case-sensitivity "Insensitive"
  tables: &table-name-length "255 characters"
  columns: &column-name-length "251 characters"

# -------------------------- #
#         Table limits       #
# -------------------------- #

table-limit-info:
  max-columns-per-table: &max-columns-per-table "None"
  max-per-database: &max-per-database "100,000 tables"

# -------------------------- #
#      Data type limits      #
# -------------------------- #

data-limit-info:
  max-record-size: &max-record-size "4 MB"

  date-and-time:
    timezone-support: &timezone-support |
      false

    timestamp-range: &timestamp-range "Up to 10,000 AD"

  integer-range: &integer-range "Limited to 38 digits of scale"

  decimal:
    precision: &decimal-precision "Must be between 1 and 38 (38 is the default)"
    # scale: &decimal-scale "Must be between 0 and the precision value"

  strings:
    max-width: &strings-max-width "16 MB"

# -------------------------- #
#     Object naming rules    #
# -------------------------- #

# Naming scenarios for columns
# The example value for column-name is _!CuStOmEr# ID

column-naming-info:
  with-mixed-case: &destination-column-name |
    {{ column-name | upcase | remove: "_!" | remove: "# " }}

  with-spaces: *destination-column-name
  with-unsupported-characters: *destination-column-name
  with-underscore-start: *destination-column-name
  with-non-letter-start: *destination-column-name

reserved-words: "https://docs.snowflake.net/manuals/sql-reference/reserved-keywords.html"

# -------------------------- #
#       LIST OF VALUES       #
# -------------------------- #

# This is all the values from the sections up there ^ in list form.
# This allows forloops to be used to display the data all at once instead of 
# Calling each thing individually.

# Note that anything preceeded by an asterisk is a reference. This means that
# to change its value, you need to find the corresponding anchor (preceeded by an
# ampersand) in the section up there ^.

# For example: To change the value of *pricing-tier, you'd look for &pricing-tier
# and then change whatever you need to change.

attributes:
  - id: "release-status"
    categories: "stitch-details"
    value: *release-status 

  - id: "pricing-tier"
    categories: "stitch-details"
    value: *pricing-tier

  - id: "supported-versions"
    categories: "stitch-details"
    value: *supported-versions

  - id: "ssl-connections"
    categories: "stitch-details"
    value: *connection-methods-ssl
    description: |
      Stitch will attempt to use SSL to connect by default. No additional configuration is needed on your part.

  - id: "ssh-connections"
    categories: "stitch-details"
    value: *connection-methods-ssh
    description: |
      Stitch does not support using SSH tunnels to connect to {{ destination.display_name }} destinations.

  - id: "vpn-connections"
    categories: "stitch-details"
    value: *connection-methods-vpn

  - id: "all-setup-instructions"
    categories: "stitch-details"
    description: |
      {{ default.description-full | flatify | markdownify }}

  - id: "incremental-replication-upserts"
    categories: "replication"
    value: *incremental-rep-upserts
    description: |
      Using a table's Primary Keys, Stitch will perform an update operation on existing rows to overwrite the data.

  - id: "primary-keys"
    categories: "replication"
    value: *primary-key-support
    important: true
    description: |
      {{ destination.display_name }} destinations natively support Primary Keys.

      Stitch requires Primary Keys to de-dupe data during Incremental Replication. Primary Key columns are created using [Primary Key constraints]({{ site.data.destinations.resource-links.snowflake.column-constraints }}){:target="new"}, which requires that values be both unique and not null.

  - id: "multiple-data-types"
    categories: "replication"
    value: *multiple-data-type-support
    important: true
    description: |
      {{ destination.display_name }} destinations do not support multiple data types in a single column.

      To accommodate this scenario, Stitch will create additional columns for each data type. Refer to the [Table structural changes guide]({{ link.destinations.storage.structure-changes | prepend: site.baseurl }}) for examples and more info.

  - id: "nested-data-structures"
    categories: "replication"
    value: *nested-structure-support
    important: true
    description: |
      {{ destination.display_name }} destinations natively support nested data structures.

      When Stitch replicates source data containing objects or arrays, Stitch will load the data intact into a [`VARIANT` column]({{ site.data.destinations.resource-links.snowflake.variant-type }}){:target="new"}. This is a {{ destination.display_name }} data type that can contain semi-structured data like JSON arrays and objects.

      You can then use {{ destination.display_name }}'s functions for semi-structured data to parse the data. More info can be found in [{{ destination.display_name }}'s documentation](https://docs.snowflake.net/manuals/sql-reference/functions-semistructured.html){:target="new"}.

  - id: "incompatible-sources"
    categories: "replication"
    important: true
    ## The value and description for this live in _data/destinations/reference/defaults.yml

  - id: "case-sensitivity"
    categories: "object-name-limits"
    value: *case-sensitivity
    important: true
    description: |
      This means that {{ destination.display_name }} destinations treat upper- and lowercase characters as different characters. For example: `CUSTOMERID` and `customerid` are unique.

      Refer to the [Column naming section of this guide](#column-naming) for examples.

  - id: "reserved-keywords"
    categories: "object-name-limits"
    ## The value and description for this live in _data/destinations/reference/defaults.yml

  - id: "table-name-length"
    categories: "object-name-limits"
    value: *table-name-length
    description: |
      Tables with names that exceed this limit will be rejected. Rejected tables are logged in the [`_sdc_rejected` table]({{ link.destinations.storage.rejected-records | prepend: site.baseurl }}).
      
  - id: "column-name-length"
    categories: "object-name-limits"
    value: *column-name-length
    description: |
      Columns with names that exceed this limit will be rejected. Rejected columns are logged in the [`_sdc_rejected` table]({{ link.destinations.storage.rejected-records | prepend: site.baseurl }}).

  - id: "max-columns-per-table"
    categories: "table-limits"
    value: *max-columns-per-table

  - id: "max-record-size"
    categories: "data-limits"
    important: true
    value: *max-record-size
    description: |
      Records that exceed this limit will be rejected. Rejected columns are logged in the [`_sdc_rejected` table]({{ link.destinations.storage.rejected-records | prepend: site.baseurl }}).

  - id: "date-and-time-timezone-support"
    categories: "data-limits"
    value: *timezone-support
    description: |
      {{ destination.display_name }} will store the data as `TIMESTAMP WITH TIMEZONE`, or `timestamp_tz` and adjust to show as UTC.

      More info about timestamp data types can be found in [Snowflake's documentation]({{ site.data.destinations.resource-links.snowflake.datetime-type }}){:target="new"}.

  # - id: "date-and-time-date-range"
  #   categories: "data-limits"
  #   value: *date-range
  #   description: |
  #     Date values outside of this range will be rejected and logged in the [`sdc_rejected` table]({{ link.destinations.storage.rejected-records | prepend: site.baseurl }}).

  #     More info about {{ destination.display_name }} date data types can be found in [Snowflake's documentation](){:target="new"}.

  - id: "date-and-time-timestamp-range"
    categories: "data-limits"
    value: *timestamp-range
    description: |
      Timestamp values outside of this range will be rejected and logged in the [`sdc_rejected` table]({{ link.destinations.storage.rejected-records | prepend: site.baseurl }}).

      More info about {{ destination.display_name }} time data types can be found in [Amazon's documentation](https://docs.snowflake.net/manuals/sql-reference/data-types-datetime.html){:target="new"}.

  - id: "integer-range"
    categories: "data-limits"
    value: *integer-range
    description: |
      {{ destination.display_name }} will store integer data as `DECIMAL(38,0)`. {{ destination.display_name }} considers integer data types to be synonymous with `NUMBER`, and as a result, Stitch will load them as such.

      Integer values that exceed the limit noted above will be rejected and logged in the [`_sdc_rejected` table]({{ link.destinations.storage.rejected-records | prepend: site.baseurl }}).

  - id: "decimal-precision"
    categories: "data-limits"
    value: *decimal-precision
    description: |
      {{ destination.display_name }} will store decimal data as `DECIMAL(38,6)`.

      Decimal values outside of this range will be rejected and logged in the [`_sdc_rejected` table]({{ link.destinations.storage.rejected-records | prepend: site.baseurl }}).

  # - id: "decimal-scale"
  #   categories: "data-limits"
  #   value: *decimal-scale
  #   description: |
  #     {{ destination.display_name }} will store decimal data as `DECIMAL(38,6)`.

  #     Decimal values outside of this range will be rejected and logged in the [`_sdc_rejected` table]({{ link.destinations.storage.rejected-records | prepend: site.baseurl }}).

  - id: "strings-max-width"
    categories: "data-limits"
    value: *strings-max-width
    important: true
    description: |
      **Note**: While {{ destination.display_name }}'s limit is 16 MB, Stitch imposes a record limit of 4 MB. The record as a whole must be less than 4 MB or it will be rejected and logged in the [`_sdc_rejected` table]({{ link.destinations.storage.rejected-records | prepend: site.baseurl }}).

  - id: "mixed-case"
    categories: "column-naming"
    example: |
      {{ column-name | remove: "_!" | remove: "# " }}
    value: *destination-column-name

  - id: "with-spaces"
    categories: "column-naming"
    example: |
      {{ column-name | downcase | remove: "_!" | remove: "#" }}
    value: *destination-column-name

  - id: "with-unsupported-characters"
    categories: "column-naming"
    example: |
      {{ column-name | downcase | remove: "_" | remove: " " }}
    value: *destination-column-name

  - id: "with-underscore-start"
    categories: "column-naming"
    example: |
      {{ column-name | downcase | remove: "!" | remove: "# " }}
    value: *destination-column-name

  - id: "with-non-letter-start"
    categories: "column-naming"
    example: |
      {{ column-name | downcase | replace: "_!","123" | remove: "# " }}
    value: *destination-column-name