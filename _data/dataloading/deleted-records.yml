#------------------------------------#
#      DELETED RECORD EXAMPLES       #
#------------------------------------#


#------------------------------------#
#        LOG-BASED INCREMENTAL       #
#------------------------------------#

log-based-incremental:

#------------------------------------#
#       LOG-BASED, SOFT DELETES      #
#------------------------------------#

  - type: "soft"
    description: |
      In this example, we'll demonstrate what happens when two recrds are soft-deleted in a source table using {{ replication-method-display-name }}.
    columns:
      - name: "id"
      - name: "name"
      - name: "is-deleted"
    examples:
      - job: "initial"
        source: &initial-source |
          A table contains three records: `id: 1`, `id: 2`, and `id: 3`.
        extraction: |
          Stitch uses `SELECT` replication to replicate the table in full.
        destination: |
          Stitch loads the table in full.
        tables:
          - location: "source"
            records: &binlog-soft-initial-table
              - id: "1"
                name: "Finn"
                is-deleted: "false"

              - id: "2"
                name: "Jake"
                is-deleted: "false"

              - id: "3"
                name: "Bubblegum"
                is-deleted: "false"

          - location: "destination"
            records: *binlog-soft-initial-table

      - job: "second"
        source: |
          Records `1` and `3` are soft deleted (`is_deleted: true`) using an `UPDATE` event.

          As `UPDATE` is a supported event type for Log-based Replication, log messages describing the modified `is_deleted` values for records `1` and `3` are written to the database's binary log.
        extraction: |
          After the historical replication job, Stitch will read updates for the table from the database's binary logs.

          Stitch reads the log messages for records `1` and `3` and replicates the updated records.
        destination: |
          The `is_deleted` and `updated_at` values are updated for records records `1` and `3`.
        tables:
          - location: "source"
            records: &binlog-soft-initial-table
              - id: "1"
                name: "Finn"
                is-deleted: "true"

              - id: "2"
                name: "Jake"
                is-deleted: "false"

              - id: "3"
                name: "Bubblegum"
                is-deleted: "true"

          - location: "destination"
            records: *binlog-soft-initial-table

#------------------------------------#
#       LOG-BASED, HARD DELETES      #
#------------------------------------#

  - type: "hard"
    description: |
      In this example, we'll demonstrate what happens when a record is hard deleted - or removed entirely - from a source table using {{ replication-method-display-name }}. In this situation, Stitch will use a `TIMESTAMP` column named `{{ system-column.deleted-at }}` to indicate when records have been identified as deleted in the source.

      **Note**: Identifying hard deleted records is dependent on how the record is deleted, as not all event types are recorded by databases in binary logs. For example: If a record is deleted using `TRUNCATE` in a MySQL database, Stitch will not detect the deletion.

      The following event types will be detected by {{ replication-method-display-name }} for MySQL- and PostgreSQL-backed database integrations:

      - `INSERT`
      - `UPDATE`
      - `DELETE`

    columns:
      - name: "id"
      - name: "name"
      - name: "_sdc_deleted_at"
    examples:
      - job: "initial"
        source: *initial-source
        extraction: |
          Stitch uses `SELECT` replication to replicate the table in full.
        destination: |
          Stitch loads the table in full.
        tables:
          - location: "source"
            records: &binlog-hard-initial-table
              - id: "1"
                name: "Finn"

              - id: "2"
                name: "Jake"

              - id: "3"
                name: "Bubblegum"

          - location: "destination"
            records: *binlog-hard-initial-table
      - job: "second"
        source: |
          Record `2` is hard deleted using a `DELETE` event.

          As `DELETE` is a supported event type for Log-based Replication, log messages describing the delete of record `2` are written to the database's binary log.
        extraction: |
          After the historical replication job, Stitch will read updates for the table from the database's binary logs.

          Stitch reads the log message for record `2` and identifies the record as deleted.
        destination: |
          Record `2` will remain in the table, but have a timestamp in the `{{ system-column.deleted-at }}` column indicating when the deletion took place.
        tables:
          - location: "source"
            records:
              - id: "1"
                name: "Finn"

              - id: "2"
                name: "Jake"

              - id: "3"
                name: "Bubblegum"

          - location: "destination"
            records:
              - id: "1"
                name: "Finn"
                _sdc_deleted_at: ""

              - id: "2"
                name: "Jake"
                _sdc_deleted_at: "2018-07-28 04:05:00"

              - id: "3"
                name: "Bubblegum"
                _sdc_deleted_at: ""


#------------------------------------#
#        KEY-BASED INCREMENTAL       #
#------------------------------------#

key-based-incremental:

#------------------------------------#
#       KEY-BASED, SOFT DELETES      #
#------------------------------------#

  - type: "soft"
    description: |
      In this example, we'll demonstrate what happens when two records are soft-deleted in the source. This table uses the `is_deleted` column as a deletion flag, which will be `true` if the record is deleted.
    columns:
      - name: "id"
      - name: "updated-at"
      - name: "is-deleted"
    examples:
      - job: "initial"
        source: *initial-source
        extraction: |
          Depending on the type of integration, the initial extraction will vary slightly:

          - **Database integration**: Stitch replicates the table in full.
          - **SaaS integration**: Stitch uses the **Start Date** defined in the {{ app.page-names.int-settings }} as the initial Replication Key (`updated_at`) value. Records with an `updated_at` value greater than or equal to the Start Date are replicated.
          
          **For all integrations**, Stitch saves `updated_at: 2018-07-27 12:07:00` as the maximum Replication Key value.
        destination: "Stitch loads the table."
        tables:
          - location: "source"
            records: &key-soft-initial-source-table
              - id: "1"
                updated-at: "2018-07-27 12:00:00"
                is-deleted: "false"

              - id: "2"
                updated-at: "2018-07-27 12:05:00"
                is-deleted: "false"

              - id: "3"
                updated-at: "2018-07-27 12:07:00"
                is-deleted: "false"

          - location: "destination"
            records: *key-soft-initial-source-table

      - job: "second"
        source: "Records `1` and `3` are soft deleted (`is_deleted: true`). The Replication Key value (`updated_at`) is updated."
        extraction: "Stitch replicates all records with an `updated_at` value `>= 2018-07-27 12:07:00`."
        destination: "The `is_deleted` and `updated_at` values are updated for records `1` and `3`."
        tables:
          - location: "source"
            records: &key-soft-second-source-table
              - id: "1"
                updated-at: "2018-07-28 04:00:00"
                is-deleted: "true"

              - id: "2"
                updated-at: "2018-07-27 12:05:00"
                is-deleted: "false"

              - id: "3"
                updated-at: "2018-07-28 04:05:00"
                is-deleted: "true"

          - location: "destination"
            records: *key-soft-second-source-table

#------------------------------------#
#       KEY-BASED, HARD DELETES      #
#------------------------------------#

  - type: "hard"
    description: |
      In this example, we'll demonstrates what happens when a record is hard-deleted - or removed entirely - from the source.

      **Note**: To remove hard deletes from destination tables replicated in this way, you'll need to:

         1. Temporarily drop the table in the destination
         2. Reset the table's Replication Keys
         3. Wait for Stitch to re-create the table during the next replication job

         **These steps must be done in this order**, or you may cause issues with replication.
    columns:
      - name: "id"
      - name: "updated-at"
    examples:
      - job: "initial"
        source: *initial-source
        extraction: |
          Depending on the type of integration, the initial extraction will vary slightly:

          - **Database integration**: Stitch replicates the table in full.
          - **SaaS integration**: Stitch uses the **Start Date** defined in the {{ app.page-names.int-settings }} as the initial Replication Key value. Records with a Replication Key value greater than or equal to the Start Date are replicated.

          **For all integrations**, Stitch saves `updated_at: 2018-07-27 12:07:00` as the maximum Replication Key value.
        destination: "Stitch loads the table."
        tables:
          - location: "source"
            records: &key-hard-initial-source-table
              - id: "1"
                updated-at: "2018-07-27 12:00:00"

              - id: "2"
                updated-at: "2018-07-27 12:05:00"

              - id: "3"
                updated-at: "2018-07-27 12:07:00"

          - location: "destination"
            records: *key-hard-initial-source-table

      - job: "second"
        source: "Before the second job begins, record `2` is hard deleted and removed entirely from the source. Records `1` and `3` are updated."
        extraction: "Stitch replicates all records with an `updated_at` value `>= 2018-07-27 12:07:00`."
        destination: |
          The `updated_at` values for records `1` and `3` are updated.

          Record `2` remains in the destination table.
        tables:
          - location: "source"
            records:
              - id: "1"
                updated-at: "2018-07-28 04:15:00"

              - id: "3"
                updated-at: "2018-07-28 04:07:00"

          - location: "destination"
            records:
              - id: "1"
                updated-at: "2018-07-28 04:15:00"

              - id: "2"
                updated-at: "2018-07-27 12:05:00"

              - id: "3"
                updated-at: "2018-07-28 04:07:00"

#------------------------------------#
#       FULL TABLE REPLICATION       #
#------------------------------------#

full-table:

#------------------------------------#
#       FULL TABLE, SOFT DELETES     #
#------------------------------------#

  - type: "soft"
    description: |
      In this example, we'll demonstrate what happens when two records are soft-deleted in the source. This table uses the `is_deleted` column as a deletion flag, which will be `true` if the record is deleted.
    columns:
      - name: "id"
      - name: "is-deleted"
    examples:
      - job: "initial"
        source: *initial-source
        extraction: "Stitch replicates the entire table."
        destination: "Stitch loads the entire table in full."
        tables:
          - location: "source"
            records: &full-soft-initial-source-table
              - id: "1"
                is-deleted: "false"

              - id: "2"
                is-deleted: "false"

              - id: "3"
                is-deleted: "false"

          - location: "destination"
            records: *key-soft-initial-source-table

      - job: "second"
        source: |
          Records `1` and `3` are soft deleted (`is_deleted: true`).
        extraction: "Stitch replicates the entire table."
        destination: |
          Stitch overwrites the table in the destination, resulting in the `is_deleted` values for records `1` and `3` being updated.
        tables:
          - location: "source"
            records: &full-soft-second-source-table
              - id: "1"
                is-deleted: "true"

              - id: "2"
                is-deleted: "false"

              - id: "3"
                is-deleted: "true"

          - location: "destination"
            records: *key-soft-second-source-table

#------------------------------------#
#       FULL TABLE, HARD DELETES     #
#------------------------------------#

  - type: "hard"
    description: |
      In this example, we'll demonstrates what happens when a record is hard-deleted - or removed entirely - from the source.

      {% capture switch-view-notice %}
      If using a BigQuery destination, this example is relevant only to integrations where you can define Replication Methods for tables.

      For other integrations used with BigQuery destinations, see the **Hard deletes in BigQuery** tab for an example of how hard deletes are handled.
      {% endcapture %}

      {% include important.html first-line="**BigQuery destinations**" content=switch-view-notice %}
    columns:
      - name: "id"
      - name: "name"
    examples:
      - job: "initial"
        source: *initial-source
        extraction: "Stitch replicates the entire table."
        destination: |
          Stitch loads the table in full.
        tables:
          - location: "source"
            records: &full-hard-initial-source-table
              - id: "1"
                name: "Finn"

              - id: "2"
                name: "Jake"

              - id: "3"
                name: "Bubblegum"

          - location: "destination"
            records: *full-hard-initial-source-table

      - job: "second"
        source: "Before the second job begins, record `2` is hard deleted and removed entirely from the source."
        extraction: "Stitch replicates the table in full."
        destination: |
          Stitch deletes and recreates the table in a single transaction, loading the replicated table in full.
        tables:
          - location: "source"
            records: &full-hard-second-source-table
              - id: "1"
                name: "Finn"

              - id: "3"
                name: "Bubblegum"

          - location: "destination"
            records: *full-hard-second-source-table

  - type: "bigquery"
    description: |
      In this example, we'll demonstrates what happens when a record is hard-deleted - or removed entirely - from the source.

      How hard deletes are handled in BigQuery depends on the **integration**:

      - **If you can define Replication Methods for an integration**, Stitch will delete and re-create tables in a single transaction. This is the scenario described in the **Hard deletes** tab for this section.
      - **Otherwise**, Stitch will append the table in full to the destination table. **This is the scenario we'll outline here.**
    columns:
      - name: "id"
      - name: "name"
    examples:
      - job: "initial"
        source: *initial-source
        extraction: "Stitch replicates the entire table."
        destination: |
          Stitch loads the table in full.
        tables:
          - location: "source"
            records: &full-hard-initial-source-table
              - id: "1"
                name: "Finn"

              - id: "2"
                name: "Jake"

              - id: "3"
                name: "Bubblegum"

          - location: "destination"
            records: *full-hard-initial-source-table

      - job: "second"
        source: |
          Before the second job begins, record `2` is hard deleted and removed entirely from the source.
        extraction: "Stitch replicates the table in full."
        destination: |
          Stitch appends the replicated data to the end of the table in the destination. In this case, records `1` and `3` would be appended.
        tables:
          - location: "source"
            records:
              - id: "1"
                name: "Finn"

              - id: "3"
                name: "Bubblegum"

          - location: "destination"
            records:
              - id: "1"
                name: "Finn"

              - id: "2"
                name: "Jake"

              - id: "3"
                name: "Bubblegum"

              - id: "1"
                name: "Finn"

              - id: "3"
                name: "Bubblegum"