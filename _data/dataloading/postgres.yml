## category-name:		## category name

# - id:           ##
#   summary: ""	## whatever the scenario is
#   result: ""		## whatever the result is 

#   rejectable: 	## 'true' if this scenario can result in rejected data
#   error:			## error message text goes here if this scenario will result in an error message
#   troubleshooting: ""   ## if the user can troubleshoot the error, enter the steps here or link to help

scenarios:
# -------------------------------------------- #
#                                              #
#                  PRIMARY KEYS                #
#                                              #
# -------------------------------------------- #

## Data arrives without a Primary Key:
  - id: no-pk
    summary: default  
    result: |
      - **Initial job**: Table is created without Primary Key and `NOT NULL` constraints.
      - **Subsequent jobs**: If using Key-based Incremental or Log-based Incremental Replication, data will be added to the table in an Append-Only fashion.

        If using Full Table Replication, the table will be overwritten in its entirety during each job.

    rejectable: false
    error: none
    troubleshooting: none

## Data arrives with single Primary Key:
  - id: single-pk
    summary: default	
    result: |
      - **Initial job:** Table is created with Primary Key constraint (`table_name_pkey`). Primary Key column has `NOT NULL` constraint.
      - **Subsequent jobs:** If using Key-based Incremental or Log-based Incremental Replication, data will be de-duped based on the Primary Key column and upserted into the table.

        If using Full Table Replication, the table will be overwritten in its entirety during each job.

    rejectable: false
    error: none
    troubleshooting: none

## Data arrives with MULTIPLE Primary Keys:
  - id: multiple-pks
    summary: default  
    result: |
      - **Initial job**: Table is created with Primary Key constraint (`table_name_pkey`). Primary Key columns have `NOT NULL` constraints.
      - **Subsequent jobs**: If using Key-based Incremental or Log-based Incremental Replication, data will be de-duped based on the Primary Key columns and upserted into the table.

        If using Full Table Replication, the table will be overwritten in its entirety during each job.

    rejectable: false
    error: none
    troubleshooting: none

## Primary Key column is changed in the warehouse:
  - id: pk-column-change
    summary: default
    result: |
      If using Key-based Incremental or Log-based Incremental Replication, data will be added to the table in an Append-Only fashion.

      If using Full Table Replication, the table will be overwritten in its entirety during each job.

    rejectable: false
    error: none
    troubleshooting: none

## Primary Key column is removed in the warehouse:
  - id: remove-pk-column
    summary: "The table's Primary Key column is removed from the destination."
    result: |
      Data will continue to be loaded into the table in an Append-Only fashion.

    rejectable: false
    error: none
    troubleshooting: none

# -------------------------------------------- #
#                                              #
#               REPLICATION KEYS               #
#                                              #
# -------------------------------------------- #

## Replicaiton Key contains NULLs
  - id: null-rep-keys
    summary: default
    result: default

    rejectable: false
    error: none
    troubleshooting: none

# -------------------------------------------- #
#                                              #
#                  DATA TYPES                  #
#                                              #
# -------------------------------------------- #

## Column contains multiple data types
  - id: mixed-data-types
    summary: default    
    result: |

      For example: Stitch first detected that `order_confirmed` contained `BOOLEAN` data, but during a subsequent job, detected `STRING` values. To accommodate data of varying types, Stitch will:

      1. Rename the original column by appending the first-detected data type to the column name.  Ex: `order_confirmed__bl`
      2. Store data for the first-detected data type in the renamed column. In this example, only `BOOLEAN` values will be stored in `order_confirmed__bl`
      3. Create additional columns to store the other data types - one for each data type detected - and append the data type to the column name. In this example, a `order_confirmed__st` column will be created to store `STRING` values.
    rejectable: false
    error: none
    troubleshooting: none

## Table contains nested data
  - id: nested-data-structures
    summary: default
    result: default

    rejectable: false
    error: none
    troubleshooting: none

# -------------------------- #
#   DATA TYPES > VARCHARs    #
# -------------------------- #
## Official docs: https://www.{{ destination.display_name }}ql.org/docs/9.6/static/datatype-character.html

## VARCHAR Storage
  - id: varchar-storage
    summary: default
    result: "{{ destination.display_name }} will store all `VARCHAR` data as `TEXT`. In {{ destination.display_name }}, this data type can store strings with unlimited lengths."

    rejectable: false
    error: none
    troubleshooting: none

## VARCHAR Widening
  - id: varchar-widening
    summary: default    
    result: "No widening will occur. {{ destination.display_name }} stores all `VARCHAR/TEXT` data as `TEXT`. In {{ destination.display_name }}, this data type can store strings with unlimited lengths."

    rejectable: false
    error: none
    troubleshooting: none


# -------------------------- #
#  DATA TYPES > Dates & Time #
# -------------------------- #

## Column contains date data with timezone info
  - id: date-with-timezone
    summary: default
    result: |
      {{ destination.display_name }} will store the data as `TIMESTAMP WITH TIME ZONE`. In {{ destination.display_name }}, `TIMESTAMP WITH TIME ZONE` data is converted to UTC using the appropriate offset for the timezone.

      Consider the following timestamp:

      ```
      2017-08-14 11:24:02 GMT-0400 (EDT)
      ```

      This data would be stored as the following in {{ destination.display_name }}:

      ```
      2017-08-14 15:24:02
      ```

      For more info on this data type, refer to [PostgreSQL's Date/Time Type documentation](https://www.postgresql.org/docs/current/static/datatype-datetime.html#AEN6249){:target="_blank"}.

    rejectable: false
    error: none
    troubleshooting: none

## Column contains timestamp data out of range
  - id: timestamps-out-of-range
    summary: default
    result: default

    rejectable: true
    error: |
      ```
      timestamp out of range for {{ destination.display_name }} on [TIMESTAMP]
      ```
    troubleshooting: default

# -------------------------- #
#    DATA TYPES > Numeric    #
# -------------------------- #
## Official docs: https://www.{{ destination.display_name }}ql.org/docs/9.6/static/datatype-numeric.html


# ## Column contains integer data out of range
#   - id: integer-out-of-range
#     summary: default
#     result: default

#     rejectable: true
#     error: |
#       ```
#       integer out of range for {{ destination.display_name }} on [INTEGER]
#       ```
#     troubleshooting: default

## Column contains decimal data out of range
  - id: decimals-out-of-range
    summary: default
    result: default

    rejectable: true
    error: |
      ```
      decimal out of range for {{ destination.display_name }} on [DECIMAL]
      ```
    troubleshooting: default

# -------------------------------------------- #
#                                              #
#                     TABLES                   #
#                                              #
# -------------------------------------------- #

## Table name is too long
  - id: table-name-limit
    summary: default
    result: default

    rejectable: true
    error: |
      ```
      Table name [TABLE] is too long for {{ destination.display_name }}
      ```
    troubleshooting: default

## Table contains too many columns
  - id: column-table-limit
    summary: default
    result: default

    rejectable: true
    error: |
      ```
      ERROR: too many columns 
      ```
    troubleshooting: default

# -------------------------------------------- #
#                                              #
#                   COLUMNS                    #
#                                              #
# -------------------------------------------- #

## A column is entirely NULL
  - id: all-empty-column
    summary: default
    result: default

    rejectable: false
    error: none
    troubleshooting: none

## Only some columns are empty
  - id: all-empty-columns
    summary: default
    result: default

    rejectable: false
    error: none
    troubleshooting: none

## Backfill columns in an Incremental Table
  - id: backfill-incremental-table
    summary: default
    result: default

    rejectable: false
    error: none
    troubleshooting: none


# -------------------------- #
#     Add/Remove Columns     #
# -------------------------- #

## Add new column in SaaS integration/data source
  - id: new-column-saas-source
    summary: default    
    result: default

    rejectable: false
    error: none
    troubleshooting: none

## Add column to Stitch-replicated table in warehouse
  - id: add-column-warehouse
    summary: default
    result: default

    rejectable: false
    error: none
    troubleshooting: none

## Column is removed from source
  - id: removed-column-source
    summary: default    
    result: default

    rejectable: false
    error: none
    troubleshooting: none

## Remove column from Stitch-replicated table in warehouse
  - id: remove-column-warehouse
    summary: default
    result: default

    rejectable: false
    error: none
    troubleshooting: none

# -------------------------- #
#        Column Names        #
# -------------------------- #
## Official docs: https://www.{{ destination.display_name }}ql.org/docs/9.6/static/sql-syntax-lexical.html


## Duplicate field names
  - id: duplicate-field-names
    summary: default
    result: default

    rejectable: true
    error: |
      ```
      Field collision on [COLUMN_NAME]
      ```
    troubleshooting: default

## Column names contain MiXeDCaSe
  - id: mixed-case-column-name
    summary: default
    result: |
      {{ destination.display_name }} will maintain the case. For example:

      | Columns in Source | Columns in {{ destination.display_name }} |
      |-------------------+--------------------------|
      | `CuStOmErId`      | `CuStOmErId`             |
      | `customerID`      | `customerID`             |

    rejectable: false
    error: none
    troubleshooting: none

## Column names contain spaces
  - id: column-name-spaces
    summary: default
    result: |
      {{ destination.display_name }} will maintain the spaces. For example:

      | Columns in Source | Columns in {{ destination.display_name }} |
      |-------------------+--------------------------|
      | `customer id`     | `customer id`            |
      | `CUSTOMER ID`     | `CUSTOMER ID`            |

    rejectable: false
    error: none
    troubleshooting: none

## Column name contains unsupported special characters
  - id: column-name-special-char
    summary: default
    result: |
      {{ destination.display_name }} will remove the unsupported characters. For example:

      | Columns in Source |  | Columns in {{ destination.display_name }} |
      |-------------------+--+--------------------------|
      | `!customerid`     |  | `customerid`             |
      | `customer!id`     |  | `customerid`             |
      | `CUSTOMER! ID`    |  | `CUSTOMER ID`            |

    rejectable: false
    error: none
    troubleshooting: none

## Column name begins with a non-letter character
  - id: column-name-starts-non-letter
    summary: default
    result: |
      {{ destination.display_name }} will remove all leading non-letter characters with the exception of leading underscores. For example:

      | Columns in Source |  | Columns in {{ destination.display_name }} |
      |-------------------+--+--------------------------|
      | `123customerid`   |  | `customerid`             |
      | `_customerid`     |  | `_customerid`            |
      | `_987CUSTOMERID`  |  | `_987CUSTOMERID`         |

    rejectable: false
    error: none
    troubleshooting: none

## Column name is too long
  - id: column-name-limit
    summary: default    
    result: |
      Columns with names that exceed the column character limit will be rejected; other columns in the table will persist to {{ destination.display_name }}.

    rejectable: true
    error: |
      ```
      Column name [COLUMN] is too long for {{ destination.display_name }}
      ```
    troubleshooting: default

# -------------------------------------------- #
#                                              #
#              WAREHOUSE CHANGES               #
#                                              #
# -------------------------------------------- #

## Customer applies indexes to Stitch-generated columns
  - id: apply-indices
    summary: default
    result: default

    rejectable: false
    error: none
    troubleshooting: none

## Customer switches to a new destination of the same type
  - id: switch-destination-same-type
    summary: default
    result: default

    rejectable: false
    error: none
    troubleshooting: none

## Customer revokes Stitch's schema/table permissions
  - id: revoke-stitch-schema-table-permissions
    summary: default
    result: default

    rejectable: none
    error: |
      ```
      ERROR: permission denied for relation [SCHEMA/TABLE]
      ```
    troubleshooting: default

## Customer revokes Stitch's warehouse access
  - id: revoke-stitch-warehouse-access
    summary: default
    result: default

    rejectable: false
    error: |
      ```
      FATAL: password authentication failed for user '[STITCH_USER]'
      ```
    troubleshooting: default