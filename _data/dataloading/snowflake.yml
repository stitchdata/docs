## category-name:		## category name

# - id:           ##
#   summary: ""	## whatever the scenario is
#   result: ""		## whatever the result is 

#   rejectable: 	## 'true' if this scenario can result in rejected data
#   error:			## error message text goes here if this scenario will result in an error message
#   troubleshooting: ""   ## if the user can troubleshoot the error, enter the steps here or link to help

scenarios:
# -------------------------------------------- #
#                                              #
#                  PRIMARY KEYS                #
#                                              #
# -------------------------------------------- #

## Data arrives without a Primary Key:
  - id: no-pk
    summary: default  
    result: |
      - **Initial job**: Table is created without `NOT NULL` column constraits.
      - **Subsequent jobs**: If using Key-based Incremental or Log-based Incremental Replication, records will be added to the table in an Append-Only fashion.

        If using Full Table Replication, the table will be overwritten in its entirety during each job.

    rejectable: false
    error: none
    troubleshooting: none

## Data arrives with single Primary Key:
  - id: single-pk
    summary: default	
    result: |
      - **Initial job:** Table is created. The Primary Key column is created with `NOT NULL` column constraits.
      - **Subsequent jobs:** If using Key-based Incremental or Log-based Incremental Replication, data will be de-duped based on the Primary Key column and upserted into the table.

        If using Full Table Replication, the table will be overwritten in its entirety during each job.

    rejectable: false
    error: none
    troubleshooting: none

## Data arrives with MULTIPLE Primary Keys:
  - id: multiple-pks
    summary: default  
    result: |
      - **Initial job**: Table is created. The Primary Key columns are created with `NOT NULL` column constraits.
      - **Subsequent jobs**: If using Key-based Incremental or Log-based Incremental Replication, data will be de-duped based on the Primary Key columns and upserted into the table.

        If using Full Table Replication, the table will be overwritten in its entirety during each job.

    rejectable: false
    error: none
    troubleshooting: none

## Primary Key column is changed in the warehouse:
  - id: pk-column-change
    heading: "I change the Primary Key column(s) in the destination?"
    anchor: "pk-column-change"
    summary: "The table's Primary Key(s) is/are changed."

    result: &pk-change |
      Changing a table's Primary Key(s) is not permitted in {{ destination.display_name }}. 

      If Primary Key columns are changed, Stitch will stop processing data for the table.
    
    rejectable: false
    error: &pk-change-error |

       ```
       Keys for table do not match Primary Keys of incoming data
       ```
    troubleshooting: &reinstate-pks |
      Re-instate the table's Primary Key(s) to allow Stitch to continue processing data for the table.
    categories: "primarykeys, warehouse"

## Primary Key column is removed in the warehouse:
  - id: remove-pk-column
    summary: default
    result: *pk-change

    rejectable: false
    error: *pk-change-error
    troubleshooting: *reinstate-pks
    categories: "primarykeys, warehouse"

# -------------------------------------------- #
#                                              #
#               REPLICATION KEYS               #
#                                              #
# -------------------------------------------- #

## Replicaiton Key contains NULLs
  - id: null-rep-keys
    summary: default
    result: default

    rejectable: false
    error: none
    troubleshooting: none

# -------------------------------------------- #
#                                              #
#                  DATA TYPES                  #
#                                              #
# -------------------------------------------- #

## Column contains multiple data types
  - id: mixed-data-types
    summary: default    
    result: |

      For example: Stitch first detected that `order_confirmed` contained `BOOLEAN` data, but during a subsequent job, detected `STRING` values. To accommodate data of varying types, Stitch will:

      1. Store data for the original data type in the original column. In this example, only `BOOLEAN` values will be stored in `order_confirmed`.

      2. Create additional columns to store the other data types - one for each data type detected - and append the data type to the column name. In this example, a `order_confirmed__st` column will be created to store `STRING` values.

    rejectable: false
    error: none
    troubleshooting: none

## Table contains nested data
  - id: nested-data-structures
    heading: "I track a table that contains nested data structures?"
    anchor: "nested-data-structures"
    summary: "Data is replicated to {{ destination.display_name }} that is nested, containing many top-level properties and potentially nested sub-properties."
    result: |
      The core object - or the top-level properties - will be split into individual columns.

      Remaining nested objects will be placed into `VARIANT` columns.

      For example: below is the raw JSON data for an `orders` table:

      ```
      {
        "order_id":"1234",                  // top-level properties
        "customer_id":"100",
        "line_items":[                      // start of nested data (array)
            {
                "product_id":"5008798",     // sub-property
                "price":"5.99"              // sub-property
            }
         ]
      }
      ```

      Below is what the table and this record will look like once loaded into {{ destination.display_name }}. Note the data types listed alongside the column names.

      | ORDER_ID (DECIMAL(38,0)) | CUSTOMER_ID (DECIMAL(38,0)) | LINE_ITEMS (VARIANT) |
      |--------------------------+-----------------------------+----------------------|
      | 1234                     | 100                         | {"product_id":"5008798","price":"5.99" } |

    rejectable: false
    error: none
    troubleshooting: none

# -------------------------- #
#   DATA TYPES > VARCHARs    #
# -------------------------- #

## VARCHAR Storage
  - id: varchar-storage
    summary: default
    result: |
      {{ destination.display_name }} will default to using the maximum length: `[VARCHAR-LIMIT]`

      **Note**: `VARCHAR` columns only consume storage for the actual amount of stored data. This means that for a 1-character string in a `{{ site.data.destinations.reference[destination.type]data-limit-info.strings.max-width }}` column, the storage used is equivalent to one character.

      For more info on full-length `VARCHAR` declarations and performance in {{ destination.display_name }}, refer to [{{ destination.display_name }}'s documentation](https://docs.{{ destination.display_name }}.net/manuals/sql-reference/data-types-text.html#varchar){:target="_blank"}.

    rejectable: false
    error: none
    troubleshooting: none

## VARCHAR Widening
  - id: varchar-widening
    summary: default    
    result: |
      No widening will occur, as Stitch defaults to storing `VARCHAR` data using {{ destination.display_name }}'s maximum length of `{{ site.data.destinations.reference[destination.type]data-limit-info.strings.max-width }}`.
    
    rejectable: false
    error: none
    troubleshooting: none

## VARCHAR exceeds limit
  - id: varchar-max-size
    summary: default
    result: default

    rejectable: false
    error: none
    troubleshooting: none


# -------------------------- #
#  DATA TYPES > Dates & Time #
# -------------------------- #

## Column contains timestamp data
  - id: timestamp-storage
    summary: default
    result: &date-time-storage |
      {{ destination.display_name }} will store the data as `TIMESTAMP WITH TIMEZONE`, or `timestamp_tz` and adjust to show as UTC.

      Refer to [{{ destination.display_name }}'s documentation](https://docs.{{ destination.display_name }}.net/manuals/sql-reference/data-types-datetime.html#timestamp-timestamp){:target="_blank"} for more info on how timestamps function in {{ destination.display_name }}.

    rejectable: false
    error: none
    troubleshooting: none

## Column contains date data without timezone info
  - id: date-no-timezone
    summary: default
    result: *date-time-storage

    rejectable: false
    error: none
    troubleshooting: none

## Column contains timestamp data out of range
  - id: timestamps-out-of-range
    summary: default
    result: default

    rejectable: true
    error: |
      ```
      timestamp out of range for {{ destination.display_name }} on [TIMESTAMP]
      ```
    troubleshooting: default

# -------------------------- #
#    DATA TYPES > Numeric    #
# -------------------------- #

## Column contains integer data
  - id: integer-storage
    summary: default
    result: |
      {{ destination.display_name }} will store integer data as `DECIMAL(38,0)`. {{ destination.display_name }} considers integer data types to be synonymous with `NUMBER`, and as a result, Stitch will replicate and type them as such.

      For more info on how {{ destination.display_name }} implements numeric data types, [refer to their documentation](https://docs.{{ destination.display_name }}.net/manuals/sql-reference/data-types-numeric.html#i){:target="_blank"}.

    rejectable: false
    error: none
    troubleshooting: none

## Column contains integer data out of range
  - id: integer-out-of-range
    summary: default
    result: default

    rejectable: true
    error: |
      ```
      integer out of range for {{ destination.display_name }} on [INTEGER]
      ```
    troubleshooting: &decimal-troubleshooting "To resolve the error, offending values in the source must be changed to be within {{ destination.display_name }}'s limit for decimal data."

## Column contains decimal data
  - id: decimal-storage
    summary: default
    result: |
      {{ destination.display_name }} will store decimal data as `DECIMAL(38,6)`.

      For more info on how {{ destination.display_name }} implements numeric data types, [refer to their documentation](https://docs.{{ destination.display_name }}.net/manuals/sql-reference/data-types-numeric.html#i){:target="_blank"}.

    rejectable: false
    error: none
    troubleshooting: default

## Column contains decimal data out of range
  - id: decimals-out-of-range
    summary: default
    result: default

    rejectable: true
    error: |
      ```
      decimal out of range for {{ destination.display_name }} on [DECIMAL]
      ```
    troubleshooting: *decimal-troubleshooting

# -------------------------------------------- #
#                                              #
#                     TABLES                   #
#                                              #
# -------------------------------------------- #
## Snowflake doesn't have a documented column-per-table limit.

## Table name is too long
  - id: table-name-limit
    summary: default
    result: |
      {{ destination.display_name }} will reject all data for the table.

    rejectable: true
    error: |
      ```
      Table name [TABLE] is too long for {{ destination.display_name }}
      ```
    troubleshooting: default

# -------------------------------------------- #
#                                              #
#                   COLUMNS                    #
#                                              #
# -------------------------------------------- #

## Completely empty columns
  - id: all-empty-column
    summary: default
    result: default

    rejectable: false
    error: none
    troubleshooting: none

## Only some columns are empty
  - id: all-empty-columns
    summary: default
    result: default

    rejectable: false
    error: none
    troubleshooting: none

## Backfill columns in an Incremental Table
  - id: backfill-incremental-table
    summary: default
    result: default

    rejectable: false
    error: none
    troubleshooting: none


# -------------------------- #
#     Add/Remove Columns     #
# -------------------------- #

## Add new column in SaaS integration/data source
  - id: new-column-saas-source
    summary: default    
    result: default

    rejectable: false
    error: none
    troubleshooting: none

## Add column to Stitch-replicated table in warehouse
  - id: add-column-warehouse
    summary: default
    result: default

    rejectable: false
    error: none
    troubleshooting: none

## Column is removed from source
  - id: removed-column-source
    summary: default    
    result: default

    rejectable: false
    error: none
    troubleshooting: none

## Remove column from Stitch-replicated table in warehouse
  - id: remove-column-warehouse
    summary: default
    result: |
      The result of deleting a column from a Stitch-generated table depends on the **type** of column being removed:

      - **Primary Key columns**: Removing/changing Primary Key columns is not permitted in {{ destination.display_name }}. Stitch will stop processing data for a table if its Primary Keys are removed or altered.
      - **General columns**: This refers to all columns that are not prepended by `_sdc` or suffixed by a data type. For example: `customer_zip`, but not `customer_zip__st`

         If new data is detected for the removed column, Stitch will re-create it in {{ destination.display_name }}.

         Note: An integration must support tracking individual columns AND you must de-select the column in Stitch for the column removal to be permanent.
      - `_sdc` **columns**: Removing a Stitch replication column will prevent Stitch from upserting replicated data into {{ destination.display_name }}.
      - **Columns with data type suffixes**: Removing a column created as result of accommodating [multiple data types](#multiple-data-types) will prevent Stitch from loading replicated data into the table. This applies to columns with names such as: `customer_zip__st`, `customer_zip__int`, etc.

    rejectable: false
    error: none
    troubleshooting: none

# -------------------------- #
#        Column Names        #
# -------------------------- #

## Duplicate field names
  - id: duplicate-field-names
    summary: default
    result: default

    rejectable: true
    error: |
      ```
      Field collision on [COLUMN_NAME]
      ```
    troubleshooting: default

## Column names contain MiXeDCaSe
  - id: mixed-case-column-name
    summary: default
    result: |
      {{ destination.display_name }} will convert letters to uppercase. For example:

      | Columns in source | Columns in {{ destination.display_name }} |
      |-------------------+--------------------------|
      | `CuStOmErId`      | `CUSTOMERID`             |
      | `customerID`      | `CUSTOMERID`             |
      | `customerid`      | `CUSTOMERID`             |

    rejectable: false
    error: none
    troubleshooting: none

## Column names contain spaces
  - id: column-name-spaces
    summary: default
    result: |
      {{ destination.display_name }} will remove spaces. For example:

      | Columns in source | Columns in {{ destination.display_name }} |
      |-------------------+--------------------------|
      | `customer id`     | `CUSTOMERID`             |
      | `CUSTOMER ID`     | `CUSTOMERID`             |

    rejectable: false
    error: none
    troubleshooting: none

## Column name contains unsupported special characters
  - id: column-name-special-char
    summary: default
    result: |
      {{ destination.display_name }} will remove all non-word characters, including leading underscores. For example:

      | Columns in Source |  | Columns in {{ destination.display_name }} |
      |-------------------+--+--------------------------|
      | `_customerid`     |  | `CUSTOMERID`             |
      | `customer!id`     |  | `CUSTOMERID`             |
      | `CUSTOMER!ID`     |  | `CUSTOMERID`             |

    rejectable: false
    error: none
    troubleshooting: none

## Column name begins with a non-letter character
  - id: column-name-starts-non-letter
    summary: default
    result: |
      {{ destination.display_name }} will remove all leading non-letter characters. For example:

      | Columns in Source |  | Columns in {{ destination.display_name }} |
      |-------------------+--+--------------------------|
      | `123customerid`   |  | `CUSTOMERID`             |
      | `_customerid`     |  | `CUSTOMERID`             |
      | `_987CUSTOMERID`  |  | `CUSTOMERID`             |

    rejectable: false
    error: none
    troubleshooting: none

## Column name is too long
  - id: column-name-limit
    summary: default    
    result: |
      Columns with names that exceed the column character limit will be rejected; other columns in the table will persist to {{ destination.display_name }}.

    rejectable: true
    error: |
      ```
      Column name [COLUMN] is too long for {{ destination.display_name }}
      ```
    troubleshooting: default

# -------------------------------------------- #
#                                              #
#              WAREHOUSE CHANGES               #
#                                              #
# -------------------------------------------- #

## Customer applies indexes to Stitch-generated columns
  - id: apply-indices
    summary: default
    result: "Not applicable - indicies are not supported by {{ destination.display_name }}."

    rejectable: false
    error: none
    troubleshooting: none

## Customer applies SORT / DIST Keys to Stitch-generated columns
  - id: sort-dist-keys
    summary: default
    result: "Not applicable - SORT and DIST Keys are not supported by {{ destination.display_name }}."

    rejectable: false
    error: none
    troubleshooting: none

## Customer switches to a new destination of the same type
  - id: switch-destination-same-type
    summary: default
    result: default

    rejectable: false
    error: none
    troubleshooting: none

## Customer revokes Stitch's schema/table permissions
  - id: revoke-stitch-schema-table-permissions
    summary: default
    result: default

    rejectable: none
    error: |
      ```
      ERROR: permission denied for relation [SCHEMA/TABLE]
      ```
    troubleshooting: default

## Customer revokes Stitch's warehouse access
  - id: revoke-stitch-warehouse-access
    summary: default
    result: default

    rejectable: false
    error: |
      ```
      FATAL: password authentication failed for user '[STITCH_USER]'
      ```
    troubleshooting: default