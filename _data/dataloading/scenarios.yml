
# -------------------------------------------- #
#                                              #
#                  PRIMARY KEYS                #
#                                              #
# -------------------------------------------- #

## Data arrives without a Primary Key:
no-pk: 
  heading: "I track a table without a Primary Key?"
  anchor: "no-primary-key"
  default-copy: "A table without a Primary Keys is replicated."
  categories: "primarykeys" #, tables, columns"

## Data arrives with a single Primary Key:
single-pk:
  heading: "I track a table with a single Primary Key?"
  anchor: "single-primary-key"
  default-copy: "A table with a single Primary Key is replicated."
  categories: "primarykeys" #, tables"

## Data arrives with multiple Primary Keys:
multiple-pks:
  heading: "I track a table with multiple Primary Keys?"
  anchor: "multiple-primary-keys"
  default-copy: "A table with multiple Primary Keys is replicated."
  categories: "primarykeys" #, tables"

## Primary Key column is changed in the warehouse
pk-column-change:
  heading: "I change the Primary Key column(s) in the destination?"
  anchor: "pk-column-change"
  default-copy: "The table's Primary Key(s) is/are changed."
  categories: "primarykeys, warehouse"

## Customer removes Primary Keys in the destination
remove-pk-column:
  heading: "I remove the Primary Key columns for a table in the destination?"
  anchor: "remove-pk-column"
  default-copy: "You remove the Primary Key columns for a table in {{ destination.display_name }}."
  default-result: "Data will be added to the table in an Append-Only fashion. This can result in duplicate records in the table."
  default-troubleshooting: ""
  categories: "primarykeys, warehouse"

# -------------------------------------------- #
#                                              #
#               REPLICATION KEYS               #
#                                              #
# -------------------------------------------- #

## Replicaiton Key contains NULLs
null-rep-keys:
  heading: "a Replication Key column contains NULLs?"
  anchor: "null-rep-keys"
  default-copy: "A table is replicated where the Replication Key column contains `NULL` values."
  default-result: |
    - **During the initial job**, the table will be created and all rows will be replicated.
    - **During subsequent jobs**, only rows with populated Replication Keys will be replicated and persisted to {{ destination.display_name }}.
  categories: "rep-keys, columns, tables"

# -------------------------------------------- #
#                                              #
#                  DATA TYPES                  #
#                                              #
# -------------------------------------------- #

## Column contains multiple data types
mixed-data-types:
  heading: "a column contains multiple data types?"
  anchor: "multiple-data-types"
  default-copy: "Stitch detects multiple data types for a single column."
  default-result: |
    For example: Stitch first detected that `order_confirmed` contained `BOOLEAN` data, but during a subsequent job, detected `STRING` values. To accommodate data of varying types, Stitch will:

    1. Rename the original column by appending the first-detected data type to the column name.  Ex: `order_confirmed__bl`
    2. Store data for the first-detected data type in the renamed column. In this example, only `BOOLEAN` values will be stored in `order_confirmed__bl`
    3. Create additional columns to store the other data types - one for each data type detected - and append the data type to the column name. In this example, a `order_confirmed__st` column will be created to store `STRING` values.
  categories: "data-types, columns, schema-change"

nested-data-structures:
  heading: "a table contains nested data structures?"
  anchor: "nested-data-structures"
  default-copy: "Data is replicated to {{ destination.display_name }} that is nested, containing many top-level properties and potentially nested sub-properties."
  default-result: |
    The core object - or the top-level properties - will be split into columns in a table.

    Any properties contained within a nested array - or sub-properties - will be "flattened" into subtables.

    For example: below is the raw JSON data for an `orders` table:

    ```
    {
      "order_id":"1234",                  // order_id and customer_id are top-level properties
      "customer_id":"100",
      "line_items":[                      // start of nested data (array)
          {
              "product_id":"5008798",     // sub-property
              "price":"5.99"              // sub-property
          }
        ]
    }
    ```

    Because there is a nested array in the JSON data, two tables will be created: one named `orders` containing the top-level properties, and another sub-table named `orders___line_items` that contains the sub-properties.

    A tutorial on how Stitch de-nests and stores these types of records can be found in the [Nested JSON Structures & Row Count Impact Guide]({{ link.storage.nested-structures | prepend: site.baseurl }}).
  categories: "schema-change"

# -------------------------- #
#   DATA TYPES > VARCHARs    #
# -------------------------- #

## VARCHAR Storage
varchar-storage:
  heading: "a VARCHAR column is replicated?"
  anchor: "varchar-storage"
  default-copy: "A `VARCHAR` column is replicated to {{ destination.display_name }}."
  categories: "data-types, columns"

## VARCHAR widening
varchar-widening:
  heading: "a VARCHAR column increases in size?"
  anchor: "varchar-widening"
  default-copy: "`VARCHAR` data is loaded that exceeds the current maximum size for the column."
  categories: "data-types, columns, schema-change"

## VARCHAR exceeds limit
varchar-max-size:
  heading: "a VARCHAR column exceeds the size maximum?"
  anchor: "varchar-max-size"
  default-copy: "A `VARCHAR` column is replicated with data that exceeds {{ destination.display_name }}'s size limit of `{{ site.data.destinations.reference[destination.type]data-limit-info.strings.max-width }}`."
  default-result: "Stitch will stop processing data for the table."
  categories: "data-types, columns"

# -------------------------- #
#  DATA TYPES > Dates & Time #
# -------------------------- #

## Column contains timestamp data
timestamp-storage:
  heading: "a column contains timestamp data?"
  anchor: "timestamp-storage"
  default-copy: "A column contains timestamp data."
  categories: "data-types, columns"

date-with-timezone:
  heading: "a column contains date data with timezone info?"
  anchor: "date-with-timezone"
  default-copy: "A column containing date data with timezone info is replicated to {{ destination.display_name }}."
  default-result:
  categories: "data-types, columns"

## Column contains timestamp data without timezone info
date-no-timezone:
  heading: "a column contains date data without timezone info?"
  anchor: "date-no-timezone"
  default-copy: "A column contains timestamp data without timezone info."
  categories: "data-types, columns"

## Column contains timestamp data out of range
timestamps-out-of-range:
  heading: "timestamp data is outside of the range supported by the destination?"
  anchor: "timestamps-out-of-range"
  default-copy: "A column contains timestamp data that is outside {{ destination.display_name }}'s supported range."
  default-result: "{{ destination.display_name }} will reject the records that fall outside the supported range."
  default-troubleshooting: "To resolve the error, offending values in the source must be changed to be within {{ destination.display_name }}'s timestamp range of {{ site.data.destinations.reference[destination.type]data-limit-info.date-and-time.timestamp-range }}."
  categories: "data-types, columns"

# -------------------------- #
#    DATA TYPES > Numeric    #
# -------------------------- #

## Column contains integer data
integer-storage:
  heading: "a column contains integer data?"
  anchor: "integer-storage"
  default-copy: "A column contains integer data."
  categories: "data-types, columns"

## Column contains integer data out of range
integer-out-of-range:
  heading: "integer data is outside of the range supported by the destination?"
  anchor: "integer-out-of-range"
  default-copy: "A column contains integer data that is outside {{ destination.display_name }}'s supported range."
  default-result: "{{ destination.display_name }} will reject the records that fall outside the supported range."
  default-troubleshooting: "To resolve the error, offending values in the source must be changed to be within {{ destination.display_name }}'s limit of {{ site.data.destinations.reference[destination.type]data-limit-info.integer-range }}."
  categories: "data-types, columns"

## Column contains decimal data
decimal-storage:
  heading: "a column contains decimal data?"
  anchor: "decimal-storage"
  default-copy: "A column contains decimal data."
  categories: "data-types, columns"

## Column contains decimal data out of range
decimals-out-of-range:
  heading: "decimal data is outside of the range supported by the destination?"
  anchor: "decimals-out-of-range"
  default-copy: "A column contains decimal data that is outside {{ destination.display_name }}'s supported range."
  default-result: "{{ destination.display_name }} will reject the records that fall outside the supported range."
  default-troubleshooting: "To resolve the error, offending values in the source must be changed to be within {{ destination.display_name }}'s limit of {{ site.data.destinations.reference[destination.type]data-limit-info.decimal.precision }}."
  categories: "data-types, columns"


# -------------------------------------------- #
#                                              #
#                     TABLES                   #
#                                              #
# -------------------------------------------- #

## Table name is too long
table-name-limit: 
  heading: "a table name exceeds the destination's maximum length?"
  anchor: "table-name-limit"
  default-copy: "A table name contains more characters than allowed by {{ destination.display_name }}."
  default-result: "{{ destination.display_name }} will reject all data for the table."
  default-troubleshooting: |
    If possible, change the table name in the source to be less than {{ destination.display_name }}'s character limit of {{ site.data.destinations.reference[destination.type]object-name-limit-info.tables }} characters.
  categories: "tables"

## Table contains too many columns
column-table-limit: 
  heading: "a table contains more columns than the destination allows?"
  anchor: "max-number-of-columns"
  default-copy: "A table arrives with more columns than {{ destination.display_name }} allows."
  default-result: "{{ destination.display_name }} will reject all data for the table."
  default-troubleshooting: "If possible, deselect some columns to allow Stitch to load data into {{ destination.display_name }} for the table. {{ destination.display_name }} has a limit of {{ site.data.destinations.reference[destination.type]table-limit-info.max-columns-per-table }} columns per table."
  categories: "tables, columns"


# -------------------------------------------- #
#                                              #
#                   COLUMNS                    #
#                                              #
# -------------------------------------------- #

## A column is entirely NULL
all-empty-column:
  heading: "a column in the source only contains NULLs?"
  anchor: "all-empty-column"
  default-copy: "A column contains only `NULL` values."
  default-result: |
    Only columns that are populated in at least one record will be created in {{ destination.display_name }}.

    For example: On the left is a table as it exists in the source; on the right is the table in {{ destination.display_name }} as replicated by Stitch:

    | SOURCE |                      |           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | FIRST JOB |                      |
    | id     | updated_at [rep-key] | confirmed | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | id         | updated_at [rep-key] |
    |--------|----------------------|-----------|------------------------------------------|------------------------------------------|------------|----------------------|
    | 1      | 2017-06-01           |           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 1          | 2017-06-01           |

    Prior to the next job, a new record is added to the table with a populated value in the `confirmed` column. Because the `confirmed` column contains at least one value, Stitch will create this column in {{ destination.display_name }}:

    | SOURCE |                      |           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | SECOND JOB |                      |           |
    | id     | updated_at [rep-key] | confirmed | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | id          | updated_at [rep-key] | confirmed | 
    |--------|----------------------|-----------|------------------------------------------|------------------------------------------|-------------|----------------------|-----------|
    | 1      | 2017-06-01           |           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 1           | 2017-06-01           |           |
    | 2      | 2017-06-02           | true      | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 2           | 2017-06-02           | true      |

    **Note** In this example, `confirmed` is `NULL` for record 1 in {{ destination.display_name }}. If record 1's `confirmed` value is ever updated, its Replication Key value must also change to ensure Stitch detects the changes.

  categories: "columns, tables"

## A table is entirely NULL
all-empty-columns:
  heading: "a table contains entirely NULL columns?"
  anchor: "all-empty-columns"
  default-copy: "A table is tracked that contains entirely `NULL` columns."
  default-result: |
    - **During the initial job**, the table will be created with only Stitch's `_sdc` columns.
    - **During subsequent job**, only columns that are populated in at least one record will be created in {{ destination.display_name }}.
  categories: "columns, tables"

## Backfill columns in an Incremental Table
backfill-incremental-table:
  heading: "I backfill values in a table using Incremental Replication?"
  anchor: "backfill-incremental-table"
  default-copy: "Columns in a table using Incremental Replication are backfilled."
  default-result: |
    **Note**: While this example is typical of Key-based Incremental Replication, it is also true for tables using Log-based Incremental Replication. In the latter scenario, think of the `updated_at` column as a log position, which is what Stitch uses as a Replication Key when reading from database logs.

    If the Replication Key used by the table is updated to a value greater than or equal to the last recorded maximum value, the backfilled records will be selected for replication.

    Consider the example below. On the left is a table as it exists in the source; on the right is the table in {{ destination.display_name }} as replicated by Stitch:

    | SOURCE |                      |           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | FIRST JOB |                      |
    | id     | updated_at [rep-key] | confirmed | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | id         | updated_at [rep-key] | confirmed |
    |--------|----------------------|-----------|------------------------------------------|------------------------------------------|------------|----------------------|-----------|
    | 1      |                      |           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 1          |                      |           |
    | 2      |                      |           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 2          |                      |           |
    | 3      | 2017-06-01           | true      | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 3          | 2017-06-01           | true      |

    A new record is added in the source with a populated Replication Key value. Stitch replicates record 4 and saves `2017-06-02` as the Replication Key value:

    | SOURCE |                      |           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | SECOND JOB |                      |           |
    | id     | updated_at [rep-key] | confirmed | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | id          | updated_at [rep-key] | confirmed |
    |--------|----------------------|-----------|------------------------------------------|------------------------------------------|-------------|----------------------|-----------|
    | 1      |                      |           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 1           |                      |           |
    | 2      |                      |           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 2           |                      |           |
    | 3      | 2017-06-01           | true      | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 3           | 2017-06-01           | true      |
    | 4      | 2017-06-02           | false     | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 4           | 2017-06-02           | false     |

    Before the next job, the `confirmed` column is backfilled for records 1 and 2. However, because the Replication Key for record 1 is still `NULL`, only record 2 will be replicated:

    | SOURCE |                      |           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | THIRD JOB  |                      |           |
    | id     | updated_at [rep-key] | confirmed | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | id          | updated_at [rep-key] | confirmed |
    |--------|----------------------|-----------|------------------------------------------|------------------------------------------|-------------|----------------------|-----------|
    | 1      |                      | true      | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 1           |                      |           |
    | 2      | 2017-06-03           | false     | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 2           | 2017-06-03           | false     |
    | 3      | 2017-06-01           | true      | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 3           | 2017-06-01           | true      |
    | 4      | 2017-06-02           | false     | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 4           | 2017-06-02           | false     |

    For record 1's `confirmed` value to be reflected in {{ destination.display_name }}, its Replication Key in the source must be populated with a value that is greater than or equal to the last maximum saved value. In this example, that's `2017-06-03`:

    | SOURCE |                      |           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | THIRD JOB  |                      |           |
    | id     | updated_at [rep-key] | confirmed | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | id          | updated_at [rep-key] | confirmed |
    |--------|----------------------|-----------|------------------------------------------|------------------------------------------|-------------|----------------------|-----------|
    | 1      | 2017-06-03           | true      | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 1           | 2017-06-03           | true      |
    | 2      | 2017-06-03           | false     | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 2           | 2017-06-03           | false     |
    | 3      | 2017-06-01           | true      | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 3           | 2017-06-01           | true      |
    | 4      | 2017-06-02           | false     | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 4           | 2017-06-02           | false     |

    If there are a large number of backfilled records in a source table, resetting the table's Replication Keys or temporarily using Full Table Replication may be required to replicate the backfilled values.
  categories: "columns, tables"

# -------------------------- #
#     Add/Remove Columns     #
# -------------------------- #

## Add new column in SaaS integration/data source
new-column-saas-source:
  heading: "a new column is added in a SaaS integration/data source?"
  anchor: "new-column-saas-source"
  default-copy: "A new column is added in a SaaS integration/data source to a table that's currently set to replicate."
  default-result: |
    1. Stitch will detect the new column during the integration's next structure sync.
    2. The column will be automatically set to replicate.
    3. **If the table uses Key-based Incremental Replication**, only records with a Replication Key value greater than or equal to the last saved bookmark value will be selected for replication. 

       This means that if values for the new column were backfilled in existing records, the only way to have Stitch replicate these values is to either:

          - Update the Replication Key values for all records **in the source**, OR 
          - Reset the integration's Replication Keys in Stitch 

    4. In the destination, the column will be appended to the end of the table.
  categories: "columns, tables, schema-change"

## Add column to Stitch-generated table in warehouse
add-column-warehouse:
  heading: "I add a column to a Stitch-generated table in my destination?"
  anchor: "add-column-warehouse"
  default-copy: "A new column is added by you to a Stitch-generated table in {{ destination.display_name }}."
  default-result: "Columns may be added to tables created by Stitch as long as they are nullable, meaning columns don't have `NOT NULL` constraints."
  categories: "columns, tables, warehouse, schema-change"

## Column is removed from source
removed-column-source:
  heading: "a column is deleted from a data source?"
  anchor: "removed-column-source"
  default-copy: "A column is deleted at the source."
  default-result: |
    How a deleted column is reflected in {{ destination.display_name }} depends on the table's Replication Method.

    Consider the example below. On the left is a table as it exists in the source; on the right is the table in {{ destination.display_name }}:

    | SOURCE |                      |           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | DESTINATION |                      |           |
    | id     | updated_at [rep-key] | confirmed | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | id          | updated_at [rep-key] | confirmed |
    |--------|----------------------|-----------|------------------------------------------|------------------------------------------|-------------|----------------------|-----------|
    | 1      | 2017-06-03           | true      | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 1           | 2017-06-03           | true      |
    | 2      | 2017-06-03           | false     | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 2           | 2017-06-03           | false     |

    Before the next job, the `confirmed` column will be deleted in the source. Additionally, new records will be added to the table.

    #### Log-based Incremental Replication {#log-based-incremental-rep-deleted-column}

    Due to how binary logs are structured, changes to a source table - including adding or removing columns, changing data types, etc. - require manual intervention before replication can continue. Refer to the [Log-based Incremental Replication documentation]({{ link.replication.log-based-incremental | prepend: site.baseurl | append: "#limitation-3--structural-changes" }}) for more info.

    #### Key-based Incremental Replication {#key-based-incremental-rep-deleted-column}

    For tables using Key-based Incremental Replication, default `NULLs` will be placed into the column going forward and the column will remain in the destination.

    Below is the source table with the deleted `confirmed` column and how this would be reflected in {{ destination.display_name }}:

    | SOURCE |                      | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | DESTINATION |                      |           |
    | id     | updated_at [rep-key] | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | id          | updated_at [rep-key] | confirmed |
    |--------|----------------------|------------------------------------------|------------------------------------------|-------------|----------------------|-----------|
    | 1      | 2017-06-03           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 1           | 2017-06-03           | true      |
    | 2      | 2017-06-03           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 2           | 2017-06-03           | false     |
    | 3      | 2017-06-04           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 3           | 2017-06-04           |           |
    | 4      | 2017-06-04           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 4           | 2017-06-04           |           |

    ### Full Table Replication {#full-table-rep-deleted-column}

    For tables using Full Table Replication: during the next job, the entire table will be overwritten. The table's schema will reflect the column's removal in the source:

    | SOURCE |                      | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | DESTINATION |                      |
    | id     | updated_at [rep-key] | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | id          | updated_at [rep-key] |
    |--------|----------------------|------------------------------------------|------------------------------------------|-------------|----------------------|
    | 1      | 2017-06-03           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 1           | 2017-06-03           |
    | 2      | 2017-06-03           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 2           | 2017-06-03           |
    | 3      | 2017-06-04           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 3           | 2017-06-04           |
    | 4      | 2017-06-04           | {::nomarkdown}<td bgcolor="#1e2023">{:/} | {::nomarkdown}<td bgcolor="#1e2023">{:/} | 4           | 2017-06-04           |
  categories: "columns, tables, schema-change"

## Remove column from Stitch-replicated table in warehouse
remove-column-warehouse:
  heading: "a column is deleted from a Stitch-replicated table in the destination?"
  anchor: "remove-column-warehouse"
  default-copy: "You remove a column from a Stitch-replicated table in your destination."
  default-result: |
    The result of deleting a column from a Stitch-generated table depends on the **type** of column being removed:

    - **Primary Key columns**: Removing Primary Key columns will result in data being added to the table in an Append-Only fashion. As Stitch uses Primary Keys to de-dupe data, deleting Primary Key columns may result in duplicate data.
    - **General columns**: This refers to all columns that are not prepended by `_sdc` or suffixed by a data type. For example: `customer_zip`, but not `customer_zip__st`

       If new data is detected for the removed column, Stitch will re-create it in {{ destination.display_name }}.

       **Note**: An integration must support tracking individual columns AND you must deselect the column in Stitch for the column removal to be permanent.
    - `_sdc` **columns**: Removing a Stitch replication column will prevent Stitch from upserting replicated data into {{ destination.display_name }}.
    - **Columns with data type suffixes**: Removing a column created as result of accommodating [multiple data types](#multiple-data-types) will prevent Stitch from loading replicated data into the table. This applies to columns with names such as: `customer_zip__st`, `customer_zip__int`, etc.
  categories: "columns, tables, warehouse, schema-change"

# -------------------------- #
#        Column Names        #
# -------------------------- #

## Duplicate field names
duplicate-field-names:
  heading: "two column names canonicalize to the same name?"
  anchor: "duplicate-field-names"
  default-copy: |
    Two columns are replicated that canonicalize to the same name.
  default-result: |
    For example: a table containing both `CustomerId` and `customerid` columns.

    {{ destination.display_name }} will reject the records and create a log for the rejected records in the `_sdc_rejected` table in that integration's schema.
  default-troubleshooting: |
    If possible, re-name one of the columns in the source so that both column names will be unique when replicated to {{ destination.display_name }}.
  categories: "columns"

## Column names contain MiXeDCaSe
mixed-case-column-name:
  heading: "a column name is mixed-case?"
  anchor: "mixed-case-column-name"
  default-copy: "A column is replicated that has a mixed-case name."
  # default-result: 
  categories: "columns"

## Column names contain spaces
column-name-spaces:
  heading: "a column name contains spaces?"
  anchor: "column-name-with-spaces"
  default-copy: "A column is replicated that has a name with spaces."
  # default-result:
  categories: "columns"

## Column name contains unsupported special characters
column-name-special-char:
  heading: "a column name contains special characters?"
  anchor: "column-name-special-char"
  default-copy: "A column is replicated with a name that contains unsupported special characters."
  default-result: "{{ destination.display_name }} will remove special characters."
  categories: "columns"

## Column name begins with a non-letter character
column-name-starts-non-letter:
  heading: "a column name begins with a non-letter?"
  anchor: "column-name-starts-non-letter"
  default-copy: "A column is replicated with a name that begins with a non-letter."
  default-result: "This scenario is unremarkable to {{ destination.display_name }}."
  categories: "columns"

## Column name is too long
column-name-limit: 
  heading: "a column name exceeds the destination's maximum length?"
  anchor: "column-name-limit"
  default-copy: "A column name contains more characters than allowed by {{ destination.display_name }}."
  default-result: "{{ destination.display_name }} will reject columns with names that exceed the column character limit. Other columns in the table will persist to {{ destination.display_name }}."
  default-troubleshooting: |
    If possible, change the column name in the source to be less than {{ destination.display_name }}'s character limit of {{ site.data.destinations.reference[destination.type]object-name-limit-info.columns }} characters.
  categories: "columns"

# -------------------------------------------- #
#                                              #
#            DESTINATION CHANGES               #
#                                              #
# -------------------------------------------- #

## Customer applies indexes to Stitch-generated columns
apply-indices:
  heading: "indices are applied to Stitch-generated columns in the destination?"
  anchor: "apply-indices"
  default-copy: "Indices are applied to Stitch-generated columns in the destination."
  default-result: "Stitch will respect the index application."
  categories: "warehouse"

## Customer applies SORT / DIST Keys to Stitch-generated columns
sort-dist-keys:
  heading: "SORT and/or DISTRIBUTION Keys are applied to Stitch-generated columns in the destination?"
  anchor: "sort-dist-keys"
  default-copy: "SORT and/or DISTRIBUTION Keys are applied to Stitch-generated columns in the destination."
  default-result: "This is not applicable to {{ destination.display_name }}."
  categories: "warehouse"

## Customer switches to a new destination of the same type
switch-destination-same-type:
  heading: "I switch to a different destination of the same type?"
  anchor: "switch-destination-same-type"
  default-copy: "You switch to a different destination of the same type."
  default-result: |
    This means the destination type is still {{ destination.display_name }}, Stitch may just be connected a different database in {{ destination.display_name }}.

    - **For tables using Key-based or Log-based Incremental Replication**, replication will continue using the Replication's Key last saved maximum value. To re-replicate historical data, resetting Replication Keys is required.
    - **For tables using Full Table Replication**, the table will be fully replicated into the new destination during the next successful job.
    - **For webhook integrations,** some data loss may be possible due to the continuous, real-time nature of webhooks. Historical data must either be backfilled or re-played.
  categories: "warehouse"

## Customer revokes Stitch's schema/table permissions
revoke-stitch-schema-table-permissions:
  heading: "I revoke Stitch's permissions to my destination?"
  anchor: "revoke-stitch-schema-table-permissions"
  default-copy: "You revoke Stitch's schema and/or table permissions to {{ destination.display_name }}."
  default-result: "Data will fail to load and you will be notified."
  default-troubleshooting: "Verify and, if necessary, re-grant the Stitch user's permissions."
  categories: "warehouse"

## Customer revokes Stitch's warehouse access
revoke-stitch-warehouse-access:
  heading: "I revoke Stitch's access to my destination?"
  anchor: "revoke-stitch-warehouse-access"
  default-copy: "You revoke Stitch's access to {{ destination.display_name }} entirely."
  default-result: "Data will fail to load and you will be notified."
  default-troubleshooting: "Re-authorize Stitch's access to {{ destination.display_name }} by ensuring the Stitch user's credentials are correct and the required permissions are granted."
  categories: "warehouse"